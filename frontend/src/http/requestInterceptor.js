import axios from "axios";

// Tworzymy instancjÄ™ axios z domyÅ›lnÄ… konfiguracjÄ…
const api = axios.create({
  baseURL: "http://localhost:4000/api", // Adres bazowy dla wszystkich Å¼Ä…daÅ„
  headers: {
    "Content-Type": "application/json", // DomyÅ›lny nagÅ‚Ã³wek dla wszystkich Å¼Ä…daÅ„
  },
  timeout: 600000, // Opcjonalny czas oczekiwania (timeout) na odpowiedÅº
});

// Interceptor, ktÃ³ry dodaje bazowy URL do wszystkich Å¼Ä…daÅ„
api.interceptors.request.use(
  (config) => {
    // MoÅ¼esz dodaÄ‡ dodatkowe nagÅ‚Ã³wki lub inne ustawienia tutaj, jeÅ›li sÄ… potrzebne
    console.log("Request made to:", config.url);
    const token = localStorage.getItem("token"); // Pobieramy token z localStorage
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`; // Dodajemy token do nagÅ‚Ã³wka
    } // Logowanie Å¼Ä…daÅ„ dla celÃ³w debugowania
    return config;
  },
  (error) => {
    // ObsÅ‚uguje bÅ‚Ä™dy przy konfiguracji Å¼Ä…dania
    return Promise.reject(error);
  }
);
let lastErrorResponse = null;
// MoÅ¼esz dodaÄ‡ interceptor odpowiedzi, jeÅ›li chcesz obsÅ‚ugiwaÄ‡ odpowiedzi globalnie
api.interceptors.response.use(
  (response) => {
    // Tutaj moÅ¼esz przechwyciÄ‡ odpowiedÅº, np. logujÄ…c jÄ… lub wykonujÄ…c dodatkowe operacje

    return response;
  },
  (error) => {
    if (error.response) {
      lastErrorResponse = error.response.data; // Zapisz peÅ‚nÄ… odpowiedÅº bÅ‚Ä™du
    } else {
      lastErrorResponse = { message: error.message }; // Na wypadek bÅ‚Ä™du sieciowego
    }

    console.log("ðŸ“¡ Interceptor przechwyciÅ‚ bÅ‚Ä…d: ", lastErrorResponse);

    return Promise.reject(error);
  }
);
export const getLastErrorResponse = () => lastErrorResponse;
export default api;
